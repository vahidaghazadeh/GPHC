name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        
    - name: Verify Go installation
      run: go version
      
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run tests
      run: go test -v ./...
      
    - name: Run tests with race detection
      run: go test -race -v ./...
      
    - name: Build binary
      run: go build -o gphc cmd/gphc/main.go
      
    - name: Test binary
      run: |
        ./gphc version
        ./gphc --help
        
    - name: Test on self repository
      run: |
        # Test GPHC on itself
        ./gphc check || true  # Allow to fail for now since we don't have tests yet
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gphc-binary-${{ matrix.go-version }}
        path: gphc
        retention-days: 7

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Run gofmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run go vet
      run: go vet ./...
      
    - name: Run staticcheck
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@v0.5.0
        staticcheck ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec.sarif ./...
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  build-release:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Build for Linux
      run: |
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o gphc-linux-amd64 cmd/gphc/main.go
        
    - name: Build for macOS
      run: |
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o gphc-darwin-amd64 cmd/gphc/main.go
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o gphc-darwin-arm64 cmd/gphc/main.go
        
    - name: Build for Windows
      run: |
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o gphc-windows-amd64.exe cmd/gphc/main.go
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: |
          gphc-linux-amd64
          gphc-darwin-amd64
          gphc-darwin-arm64
          gphc-windows-amd64.exe
        retention-days: 30

  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        
    - name: Build GPHC
      run: go build -o gphc cmd/gphc/main.go
      
    - name: Run Health Check on Repository
      run: |
        echo "Running GPHC health check on this repository..."
        ./gphc check
        
    - name: Comment Health Score on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { execSync } = require('child_process');
          try {
            const output = execSync('./gphc check', { encoding: 'utf8' });
            const scoreMatch = output.match(/Overall Health Score: (\d+)\/100/);
            const gradeMatch = output.match(/\(([A-F][+-]?)\)/);
            
            if (scoreMatch && gradeMatch) {
              const score = scoreMatch[1];
              const grade = gradeMatch[1];
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üè• Repository Health Check Results
                
                **Health Score:** ${score}/100 (${grade})
                
                <details>
                <summary>üìä Full Report</summary>
                
                \`\`\`
                ${output}
                \`\`\`
                
                </details>`
              });
            }
          } catch (error) {
            console.log('Health check failed:', error.message);
          }
